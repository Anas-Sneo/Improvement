JDK:
JDK is a complete software development kit used to develop Java applications. It contains tools like javac (compiler), JRE, debuggers, and documentation tools.
Example: If you're writing and compiling Java code in IntelliJ or Eclipse, you're using the JDK.

JRE (Java Runtime Environment):
JRE provides the environment needed to run Java applications. It includes the JVM + necessary libraries but not the compiler.
Example: End users who only need to run your app would only need the JRE, not the whole JDK.

JVM (Java Virtual Machine):
JVM is the engine that actually runs Java bytecode. It makes Java platform-independent by interpreting the bytecode to machine code.


javac (Java Compiler):
javac is the compiler that converts .java files into .class files (bytecode).
Example: javac HelloWorld.java

Bytecode:
Bytecode is the intermediate code generated by the javac compiler. It’s not readable by humans but is understood by JVM.
Example: It’s stored in .class files and is same across platforms (Windows, Mac, Linux).

JIT (Just-In-Time Compiler):
JIT is part of the JVM. It improves performance by compiling bytecode to native machine code at runtime.
JIT helps speed up code that’s run multiple times (like loops).




ADDITIONAL CONTENT:
JDK, JRE, JVM Overview:
•	The JDK (Java Development Kit) includes tools and libraries for writing Java code, like the debugger and the `javac` compiler.
•	JRE (Java Runtime Environment) provides the environment to run Java programs and includes the JVM (Java Virtual Machine).
•	The JVM executes Java bytecode, converting it to machine specific code.
Execution Process:
•	When a Java file (`.java` file) is written and compiled, `javac` compiles it into bytecode (stored in a `.class` file).
•	Bytecode is platform independent, allowing it to be executed on any system with a JVM (e.g., Windows, Mac).
Role of JVM:
•	The JVM interprets the bytecode and converts it into platform dependent machine code, which varies by OS.
•	The JVM runs the bytecode line by line and produces the final output in machine code (binary format).
Tools Explanation:
•	`javac` is the compiler in JDK responsible for converting `.java` files to bytecode.
•	`java` is the command to run compiled Java programs via the JVM, located in the JDK's `bin` directory.


